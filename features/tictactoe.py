import random
from colorama import init, Fore, Style
from termcolor import colored
import art
import emoji
from prettytable import PrettyTable

init(autoreset=True)


def drawBoard(board):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
    print("\n")
    for row in [7, 4, 1]:
        cells = []
        for i in range(3):
            cell = board[row + i]
            if cell == 'X':
                cells.append(Fore.RED + cell + Style.RESET_ALL)
            elif cell == 'O':
                cells.append(Fore.BLUE + cell + Style.RESET_ALL)
            else:
                cells.append(cell)
        print(f" {cells[0]} | {cells[1]} | {cells[2]} ")
        if row != 1:
            print("‚Äî‚Äî‚Äî+‚Äî‚Äî‚Äî+‚Äî‚Äî‚Äî")
    print("\n")


def inputPlayerLetter():
    """–ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç X –∏–ª–∏ O"""
    letter = ''
    while letter not in ['X', 'O']:
        print("–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –∑–∞ üéå 'X' –∏–ª–∏ –∑–∞ üõ∂ 'O'? (–≤–≤–µ–¥–∏—Ç–µ X –∏–ª–∏ O)")
        letter = input().upper()
    if letter == 'X':
        return ['X', 'O']
    else:
        return ['O', 'X']


def whoGoesFirst():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º"""
    if random.randint(0, 1) == 0:
        return '–ö–æ–º–ø—å—é—Ç–µ—Ä'
    else:
        return '–ß–µ–ª–æ–≤–µ–∫'


def makeMove(board, letter, move):
    """–°—Ç–∞–≤–∏—Ç —Å–∏–º–≤–æ–ª –≤ –∫–ª–µ—Ç–∫—É"""
    board[move] = letter


def isWinner(bo, le):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫"""
    return (
        (bo[7] == le and bo[8] == le and bo[9] == le) or  # –≤–µ—Ä—Ö
        (bo[4] == le and bo[5] == le and bo[6] == le) or  # —Ü–µ–Ω—Ç—Ä
        (bo[1] == le and bo[2] == le and bo[3] == le) or  # –Ω–∏–∑
        (bo[7] == le and bo[4] == le and bo[1] == le) or  # –ª–µ–≤–æ
        (bo[8] == le and bo[5] == le and bo[2] == le) or  # —Ü–µ–Ω—Ç—Ä –∫–æ–ª–æ–Ω–∫–∞
        (bo[9] == le and bo[6] == le and bo[3] == le) or  # –ø—Ä–∞–≤–æ
        (bo[7] == le and bo[5] == le and bo[3] == le) or  # –¥–∏–∞–≥–æ–Ω–∞–ª—å
        (bo[9] == le and bo[5] == le and bo[1] == le)     # –¥–∏–∞–≥–æ–Ω–∞–ª—å
    )


def getBoardCopy(board):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é –ø–æ–ª—è"""
    return board[:]


def isSpaceFree(board, move):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞"""
    return board[move] == ' '


def getPlayerMove(board):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞"""
    move = ' '
    while move not in '1 2 3 4 5 6 7 8 9'.split() or not isSpaceFree(board, int(move)):
        print("–í–∞—à —Ö–æ–¥! –í–≤–µ–¥–∏—Ç–µ –∫–ª–µ—Ç–∫—É (1-9):")
        move = input()
        if not move.isdigit() or int(move) not in range(1, 10):
            print(Fore.YELLOW + "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9!" + Style.RESET_ALL)
        elif not isSpaceFree(board, int(move)):
            print(Fore.RED + "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞!" + Style.RESET_ALL)
    return int(move)


def chooseRandomMoveFromList(board, movesList):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥"""
    possibleMoves = [i for i in movesList if isSpaceFree(board, i)]
    return random.choice(possibleMoves) if possibleMoves else None


def getComputerMove(board, computerLetter):
    """AI: –ª–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    playerLetter = 'O' if computerLetter == 'X' else 'X'

    for i in range(1, 10):
        boardCopy = getBoardCopy(board)
        if isSpaceFree(boardCopy, i):
            makeMove(boardCopy, computerLetter, i)
            if isWinner(boardCopy, computerLetter):
                return i

    for i in range(1, 10):
        boardCopy = getBoardCopy(board)
        if isSpaceFree(boardCopy, i):
            makeMove(boardCopy, playerLetter, i)
            if isWinner(boardCopy, playerLetter):
                return i

    move = chooseRandomMoveFromList(board, [1, 3, 7, 9])
    if move:
        return move

    if isSpaceFree(board, 5):
        return 5

    return chooseRandomMoveFromList(board, [2, 4, 6, 8])


def isBoardFull(board):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –ø–æ–ª–µ"""
    return all(cell != ' ' for cell in board[1:10])


def show_welcome():
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å ASCII-–∞—Ä—Ç–æ–º"""
    print(art.text2art("Tic Tac Toe", font="small"))
    print(colored(emoji.emojize("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏!"), "cyan", attrs=["bold"]))
    print(Fore.YELLOW + "–ü—Ä–∞–≤–∏–ª–∞: —Å—Ç–∞–≤—å—Ç–µ X –∏–ª–∏ O, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å 3 –≤ —Ä—è–¥." + Style.RESET_ALL)
    print("="*50)


def show_stats(player_wins, comp_wins, draws):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    table = PrettyTable()
    table.field_names = [colored("–ò–≥—Ä–æ–∫", "green"), colored("–ö–æ–º–ø—å—é—Ç–µ—Ä", "red"), colored("–ù–∏—á—å–∏", "yellow")]
    table.add_row([player_wins, comp_wins, draws])
    table.align = "c"
    print(table)


def play_again():
    """–°–ø—Ä–æ—Å–∏—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"""
    print("\n" + emoji.emojize("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑? :thinking_face: (–¥–∞/–Ω–µ—Ç)"))
    return input().lower().startswith('–¥')


def main():
    show_welcome()

    player_wins = 0
    comp_wins = 0
    draws = 0

    while True:
        theBoard = [' '] * 10
        playerLetter, computerLetter = inputPlayerLetter()
        turn = whoGoesFirst()
        print(f"{turn} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º.")

        gameIsPlaying = True

        while gameIsPlaying:
            if turn == '–ß–µ–ª–æ–≤–µ–∫':
                drawBoard(theBoard)
                move = getPlayerMove(theBoard)
                makeMove(theBoard, playerLetter, move)

                if isWinner(theBoard, playerLetter):
                    drawBoard(theBoard)
                    print(colored(emoji.emojize("üéâ –£—Ä–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! :trophy:"), "green", attrs=["bold"]))
                    player_wins += 1
                    gameIsPlaying = False
                elif isBoardFull(theBoard):
                    drawBoard(theBoard)
                    print(colored(emoji.emojize("ü§ù –ù–∏—á—å—è! :handshake:"), "yellow", attrs=["bold"]))
                    draws += 1
                    gameIsPlaying = False
                else:
                    turn = '–ö–æ–º–ø—å—é—Ç–µ—Ä'

            else:
                move = getComputerMove(theBoard, computerLetter)
                makeMove(theBoard, computerLetter, move)
                print(f"–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª {computerLetter} –≤ –∫–ª–µ—Ç–∫—É {move}...")

                if isWinner(theBoard, computerLetter):
                    drawBoard(theBoard)
                    print(colored(emoji.emojize("üíÄ –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."), "red", attrs=["bold"]))
                    comp_wins += 1
                    gameIsPlaying = False
                elif isBoardFull(theBoard):
                    drawBoard(theBoard)
                    print(colored(emoji.emojize("ü§ù –ù–∏—á—å—è! :handshake:"), "yellow", attrs=["bold"]))
                    draws += 1
                    gameIsPlaying = False
                else:
                    turn = '–ß–µ–ª–æ–≤–µ–∫'

        show_stats(player_wins, comp_wins, draws)

        if not play_again():
            print(colored(emoji.emojize("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üëã"), "cyan"))
            break

if __name__ == "__main__":
    main()